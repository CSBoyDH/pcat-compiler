==========================
Abstruct Syntax - Modified
==========================

program                  -> ( Program ( body ) )
body                     -> ( BodyDef ( declarations-list statements-list ) )
declarations-list        -> ( DeclareList ( {declarations} ) )
declarations             -> ( VarDecs ( {var-dec} ) )
                         -> ( TypeDecs ( {type-dec} ) )
                         -> ( ProcDecs ( {proc-dec} ) )
var-dec                  -> ( VarDec ( ID type expression ) )
type-dec                 -> ( TypeDec ( ID type ) ) 
proc-dec                 -> ( ProcDec ( ID formal-param-list type body ) ) 
type                     -> ( NamedTyp ( ID ) )
                         -> ( ArrayTyp ( type ) )
                         -> ( RecordTyp ( component-list ) )
                         -> ( NoTyp () )
component-list           -> ( CompList ( { component } ) )
component                -> ( Comp ( ID type ) )
formal-param-list        -> ( FormalParamList ( {formal-param } ) )
formal-param             -> ( Param ( ID type ) )
statements-list          -> ( StList ( { statements } ) )
statement                -> ( AssignSt ( lvalue expression ) )
                         -> ( CallSt ( ID expression-list ) )
                         -> ( ReadSt ( lvalue-list ) )
                         -> ( WriteSt  ( expression-list ) )
                         -> ( IfSt ( expression statement statement ) )
                         -> ( WhileSt ( expression statement ) )
                         -> ( LoopSt ( statement ) )
                         -> ( ForSt ( ID expression expression expression statement ) )
                         -> ( ExitSt () )
                         -> ( RetSt ( expression ) )
                         -> ( RetSt () ) 
                         -> ( SeqSt ( statements-list ) )
expression-list          -> ( ExprList ( { expression } ) )
expression               -> ( BinOpExp ( binop expression expression ) )
                         -> ( UnOpExp  ( unop expression ) )
                         -> ( LvalExp ( lvalue ) )
                         -> ( CallExp ( ID expression-list ) )
                         -> ( RecordExp ( ID record-init-list ) )        
                         -> ( ArrayExp  ( ID array-init-list ) )
                         -> ( IntConst ( INTEGER ) )
                         -> ( RealConst ( REAL ) )
                         -> ( StringConst ( STRING ) )
record-init-list         -> ( RecordInitList ( { record-init } ) )
record-init              -> ( RecordInit ( ID expression ) )
array-init-list          -> ( ArrayInitList ( { array-init-list } ) )
array-init               -> ( ArrayInit ( expression expression ) )   
lvalue-list              -> ( LvalList ( { lvalue } ) )   
lvalue                   -> ( Var ( ID ) )
                         -> ( ArrayDeref ( lvalue expression ) )
                         -> ( RecordDeref ( lvalue ID ) )
binop                    -> GT | LT | EQ | GE | LE | NE | PLUS | MINUS | TIMES | SLASH
                         -> DIV | MOD | AND | OR 
unop                     -> UPLUS | UMINUS | NOT 

