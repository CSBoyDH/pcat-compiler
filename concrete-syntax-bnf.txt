program                      -> PROGRAM IS body ';'
body                         -> declaration-S BEGIN statement-S END
declaration-S                -> declaration-S declaration
                             -> 
statement-S                  -> statement-S statement
                             ->
declaration                  -> VAR var-decl-S
                             -> TYPE type-decl-S
                             -> PROCEDURE procedure-decl-S
var-decl-S                   -> var-decl-S var-decl
                             ->
type-decl-S                  -> type-decl-S type-decl
                             ->
porcedure-decl-S             -> porcedure-decl-S porcedure-decl
var-decl                     -> ID var-decl-id-S var-decl-type-O ':=' expression ';'
var-decl-id-S                -> var-decl-id-S ',' ID
                             ->
var-decl-type-O              -> ':' typename
                             -> 
type-decl                    -> ID IS type ';' 
procedure-decl               -> ID formal-params procedure-decl-type-O IS body ';'
procedure-decl-type-O        -> ':' typename
                             -> 
typename                     -> ID
type                         -> ARRAY OF typename
                             -> RECORD component component-S END
component                    -> ID ':' typename ';'
formal-params                -> '(' fp-section fp-section-S ')' 
                             -> '(' ')' 
fp-section-S                 -> fp-section-S ';' fp-section
                             ->
fp-section                   -> ID fp-section-id-S ':' typename
fp-section-id-S              -> fp-section-id-S ',' ID
                             -> 
statement                    -> lvalue ':=' expression ';'
                             -> ID actual-params ';'
                             -> READ '(' lvalue statement-lvalue-S ')' ';'
                             -> WRITE write-params ';'
                             -> IF expression THEN statement-S
                                statement-elsif-S
                                statement-else-O END ';'
                             -> WHILE expression DO statement-S END ';'
                             -> LOOP statement-S END ';'
                             -> FOR ID ':=' expression TO expression statement-by-O 
                                DO statement-S END ';'
                             -> EXIT ';'
                             -> RETURN expression-O ';'
statement-lvalue-S           -> statement-lvalue-S ',' lvalue
                             ->
statement-elsif-S            -> statement-elsif-S ELSIF expression THEN statement-S
                             ->
statement-else-O             -> ELSE statement-S
                             -> 
statement-by-O               -> statement-by-O BY expression
                             -> 
write-params                 -> '(' write-expr write-params-expr-S ')'
                             -> '(' ')'
write-params-expr-S          -> write-params-expr-S ',' write-expr
                             ->
write-expr                   -> STRING
                             -> expression
expression-O                 -> expression
                             -> 
expression                   -> number
                             -> lvalue
                             -> '(' expression ')'
                             -> unary-op expression
                             -> expression binary-op expression
                             -> ID actual-params
                             -> ID record-inits
                             -> ID array-inits
lvalue                       -> ID
                             -> lvalue '[' expression ']'
                             -> lvalue '.' ID
actual-params                -> '(' expression actual-params-expr-S ')'
                             -> '(' ')'
actual-params-expr-S         -> actual-params-expr-S ',' expression
                             ->
record-inits                 -> '{' ID ':=' expression record-inits-pair-S '}'
record-inits-pair-S          -> record-inits-pair-S ';' ID ':=' expression
                             -> 
array-inits                  -> '[<' array-init array-inits-array-init-S '>]'
array-inits-array-init-S     -> array-inits-array-init-S ',' array-init
                             -> 
array-init                   -> array-init-expr-of-S expression
array-init-expr-of-S         -> array-init-expr-of-S expression OF
                             ->
number                       -> INTEGER | REAL
unary-op                     -> '+' | '-' | NOT
binary-op                    -> '+' | '-' |  '*' | '/' | DIV | MOD | OR | AND
                             -> '>' | '<' | '=' | '>=' | '<=' | '<>'